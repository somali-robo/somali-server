import { Meteor } from 'meteor/meteor';
import '../imports/api/rest';
import Messages from '../imports/api/db/messages';
import http from 'http';
import socket_io from 'socket.io';

const PORT = process.env.PORT || 8080;

Meteor.startup(() => {
  // 初期データ投入
  fncDataInit();

  // Socket.io Server 初期化
  var fnc = Meteor.bindEnvironment(function(action,data) {
    //受信メッセージをDB書き込む
    console.log('action '+action);
    console.log(data);
    //TODO: ここでDBに保存する
    const msg = {
      subject: action,
      body:data.value,
      userId:data.userId,
      createdAt: new Date()
    };
    Messages.insert(msg);
  });
  fncSocketIoInit(fnc);
});

// ユーザ管理ハッシュ
var userHash = {};

//Socket.io 初期化
function fncSocketIoInit(listener){
  const server = http.createServer();
  const io = socket_io(server);

  var connection = function(socket,listener) {
    //console.log('new socket client');
    // 接続開始カスタムイベント(接続元ユーザを保存し、他ユーザへ通知)
    socket.on("connected", function (data) {
      listener('connected',data.userId);
      var value = data.userId + "が入室しました";
      console.log(value);
      userHash[socket.id] = data.userId;
      io.sockets.emit("publish", {userId:data.userId,value:value});
    });

    // メッセージ送信カスタムイベント
    socket.on("publish", function (data) {
        io.sockets.emit("publish", data);
        //リスナーに通知
        listener('publish',data);
    });

    // 接続終了組み込みイベント(接続元ユーザを削除し、他ユーザへ通知)
    socket.on("disconnect", function () {
      if (userHash[socket.id]) {
        var userId = userHash[socket.id];
        listener('disconnect',userId);

        var value = userId + "が退出しました";
        console.log(value);
        delete userHash[socket.id];
        io.sockets.emit("publish", {userId:userId,value:value});
      }
    });
  };

  // Socket.io New client
  io.on('connection', function(socket) {
    connection(socket,listener);
  });

  // Socket.io Start server
  try {
    server.listen(PORT);
  } catch (e) {
    console.error(e);
  }
};

// 初期データ投入
function fncDataInit(){
    if (Messages.find().count() === 0) {

    }
  /*
  if (Messages.find().count() === 0) {
    const data = [
      {
        subject: 'Meteor',
        body:"Body Message",
        userId:"XXXXXXX",
        createdAt: new Date()
      }
    ];

    //初期データを書き込む
    data.forEach(message => {
         Messages.insert(message);
       });
  }
  */
};
