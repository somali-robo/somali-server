import { Template } from 'meteor/templating';
import { ReactiveVar } from 'meteor/reactive-var';
import { HTTP } from 'meteor/http';

import Messages from '../imports/api/db/messages';

import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.min.js';

import './main.html';

//Hack https://github.com/socketio/socket.io-client/issues/961
import Response from 'meteor-node-stubs/node_modules/http-browserify/lib/response';
if (!Response.prototype.setEncoding) {
  Response.prototype.setEncoding = function(encoding) {
    // do nothing
  }
}

Template.Messages.onCreated(function() {
  //ログイン処理
  login();

  // メッセージ一覧取得
  loadMessages(this);

  //Socket.io クライアント初期化
  socketInit();
});

Template.Messages.helpers({
  messages: () => Template.instance().messages.get(),
});

//ログイン状態を確認
function login(){
  Deps.autorun(function(){
    if(Meteor.userId()) {
      console.log('ログインしてる');
      var userobj = Meteor.user();
      console.log(Meteor.userId());  // UserID
      console.log(userobj); // メールアドレス
    }else{
      console.log('ログインしてない');
    }
  });
};

//メッセージ一覧をロードする
function loadMessages(template){
  template.messages = new ReactiveVar();
  const fetchMessages = () => {
    HTTP.get('/api/messages', (err, res) => {
      if (err) { console.error(err); return; }
      template.messages.set(res.data.data);
      console.log("GET /api/messages");
      console.log(res.data.data);
    });
  }
  fetchMessages();
  //定期的に実行する
  Meteor.setInterval(fetchMessages, 5000);
};

//UUID生成
function getUniqueStr(myStrong){
  var strong = 1000;
  if (myStrong) strong = myStrong;
  return new Date().getTime().toString(16)  + Math.floor(strong*Math.random()).toString(16)
}

//Socket.io クライアントを初期化
function socketInit(){
  // Socket io client
  var userId = getUniqueStr();

  const HOST = 'localhost';
  const PORT = 8080;
  let socket = require('socket.io-client')(`http://${HOST}:${PORT}`);
  socket.on('connect', function() {
    console.log('Client connected');
    //試しに定期的に実行する
    Meteor.setInterval(function(){
      var msg = "デバイスからのメッセージ "+Math.floor(Math.random()*100);
      console.log(msg);
      //メッセージ送信
      publish(socket, userId, msg);
    }, 5000);
  });
  socket.on('disconnect', function() {
    console.log('Client disconnected');
  });

  //接続後すぐにメッセージを送信してみる
  socket.emit("connected", {userId:userId,value: ""});
  console.log("connected userId:"+userId);
};

//メッセージ送信
function publish(socket,userId,value){
  console.log("publish");
  socket.emit("publish", {userId:userId,value:value});
};
